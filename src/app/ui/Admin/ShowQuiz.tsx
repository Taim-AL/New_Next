"use client"
import * as React from 'react';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import "@/app/ui/Assets/Css/student/QuizPage.css"
import { Col, Row } from 'react-bootstrap';
import Axios from '@/app/lib/axios';
import IntegrationNotistack from '@/app/ui/Alert';
import { useState } from 'react';
import { QuestionType3 } from '@/app/lib/definitions';
import { useRouter } from 'next/navigation';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';

export default  function ShowQuizForAdmin({courseId ,quizId }:{quizId:string ,courseId:string}) {
  const [open, setOpen] = useState(true);
  const [from , setFrom] = React.useState<number | null> (null)
  const [to , setTo] = React.useState<number | null> (null)
  const [step , setStep] =useState<number | null> (0)
  const [isAuto , setIsAuto] =useState<boolean | null> (true);
  const [isFinal , setIsFinal] =useState<boolean | null> (false);
  const [message , setMessage] =useState<string>("");
  const [title , setTitle] =useState<string>("");
  const [error , setError] =useState<string>("");
  const router = useRouter();
  const [questions ,setQuestions] = useState<QuestionType3[]>([])
  const handleClose = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
    setOpen(false);
    // router.push(`/dashboard/admin/courses/${courseId}`)
    setStep(0);
  };

  const handleClickOpen = () => {
    setOpen(true);
  };

const handleLeaveQuiz =async (event: React.MouseEvent<HTMLButtonElement>)=>{
      event.preventDefault();
      router.push(`/dashboard/admin/courses/${courseId}`)
      setStep(0);
      setFrom(null)
      setTo(null)
      setTitle("")
      setQuestions([])
      setIsFinal(false)
      setIsAuto(true)
      }


      React.useEffect(()=>{
        try{
            Axios.get(`/admin/get-quiz-for-admin/${quizId}`).then(response =>{
                console.log("Exam :", response)
                if(response.data.success === true){
                    setQuestions(response.data.data.questions);
                    setFrom(response.data.data.from_video)
                    setTo(response.data.data.to_video)
                    setTitle(response.data.data.title)
                    setIsFinal(response.data.data.is_final === 0 ? false : true)
                    setIsAuto(response.data.data.is_auto_generated === 0 ? false : true)
                }
                })}catch(error){
            console.log(error)
            }
        },[])
  
  return (
    <>
    {from ?
    <React.Fragment>
      <button title="take Quiz" type="button" className="quiz_update_button " onClick={handleClickOpen}>
          <ArrowForwardIosIcon className="icon_arrow" /> 
      </button>
      <Dialog
        open={open}
        onClose={handleClose}
        maxWidth="md"
        fullWidth
        slotProps={{
          paper: {
            component: 'form',
          },
        }}
      >
        <DialogContent>
            

            {step === 0 &&(
                    <>
                    <Row className='mx-0'>
                        <Col lg="12" md="12" className='quiz_info'>
                            <label className='quiz_lable'>Quize Title : {title}</label>
                            {isAuto && isAuto === true ? <label className='quiz_lable'>This Quiz generated by AI</label>:<label className='quiz_lable'>This Quiz generated by the Teacher</label>}
                            <label className='quiz_lable'>This Quiz For Videos From {from} to {to}</label>
                            {isFinal && isFinal === true? <label className='quiz_lable'>This Quiz is Final</label>:<label className='quiz_lable'>This Quiz isn't Final</label>}
                        </Col>
                    </Row>
                    </>
            )}
            {step === 1 && (
                <>  
                <label className='quiz_lable'>Questions :</label>
                  <div className="outer-container-quistions">
                    {questions.map((question,index)=>(
                        <Row key={index} className='mx-0 quiz_info'>
                          <Col xs="12" md="12">
                              <label className='quiz_lable'>Question {index+1}:</label>
                            <label className='quiz_lable'>{question.text}</label>
                            <label className='quiz_lable'>Choices :</label>

                          </Col>
                          <Col xs="12" md="12">
                            <Row className="level-container mx-0">
                                <Col md="12" lg="6">
                                    <p>A : {question.choices[0].choice}</p>
                                </Col>
                                <Col md="12" lg="6">
                                    <p>B : {question.choices[1].choice}</p>
                                </Col>
                                <Col md="12" lg="6">
                                    <p>C : {question.choices[2].choice}</p>
                                </Col>
                                <Col md="12" lg="6">
                                    <p>D : {question.choices[3].choice}</p>
                                </Col>
                            </Row>
                          </Col>
                        </Row>
                    ))}
                    
                  </div>  
                </>
            )}

            

        </DialogContent>
        <DialogActions>
            {step === 1 && (
            <button  className='cancel-create-course' onClick={()=>{setStep(step-1)}}>Prev</button>
            )}
          <button onClick={handleClose}  className='cancel-create-course'>Cancel</button>
          {step === 0  && !isAuto?
          <button type="button" className='button-create-course'onClick={()=>{setStep(step+1)}}>Next</button>
          :""
          }
        </DialogActions>
        
      </Dialog>


      {error !== "" ? <IntegrationNotistack variant="error"  message={error}/> : "" }
      {message !== "" ? <IntegrationNotistack variant="success"  message={message}/> : "" }
    </React.Fragment>
    :
    ""
    }
    </>
  );
}